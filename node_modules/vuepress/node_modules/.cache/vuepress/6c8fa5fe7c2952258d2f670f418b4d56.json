{"remainingRequest":"/Users/kenquietwei/Desktop/documents/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/kenquietwei/Desktop/documents/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/kenquietwei/Desktop/documents/docs/QT/nodejs/2.1-Module.md?vue&type=template&id=7f979daa&","dependencies":[{"path":"/Users/kenquietwei/Desktop/documents/docs/QT/nodejs/2.1-Module.md","mtime":1558665531000},{"path":"/Users/kenquietwei/Desktop/documents/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/kenquietwei/Desktop/documents/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/kenquietwei/Desktop/documents/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/kenquietwei/Desktop/documents/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/kenquietwei/Desktop/documents/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":499162500000}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"module\"><a class=\"header-anchor\" href=\"#module\" aria-hidden=\"true\">#</a> Module</h1>\n<h2 id=\"require-及其运行机制\"><a class=\"header-anchor\" href=\"#require-及其运行机制\" aria-hidden=\"true\">#</a> require 及其运行机制</h2>\n<ol>\n<li>Node 遵循 CommonJS 来规范，使用require 来进行加载模块<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 定义一个简单的模块</span>\n<span class=\"token keyword\">let</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">talk</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'I am talking...'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">listen</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'I am listening...'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 向外暴露接口</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> person<span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br></div><!--beforeend--></div><!--afterend--></li>\n<li>该模块提供了 person 接口，使用module.exports 向外暴露接口，在外部需要引用的话就需要require关键字进行引用<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> person <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./person.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nperson<span class=\"token punctuation\">.</span><span class=\"token function\">talk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div><!--beforeend--></div><!--afterend--></li>\n<li>如果只需要到这个模块的 talk 方法，可以这样引用<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> talk <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./person'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>talk<span class=\"token punctuation\">;</span>\n<span class=\"token function\">talk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div><!--beforeend--></div><!--afterend--></li>\n</ol>\n<h3 id=\"关于重复引用问题\"><a class=\"header-anchor\" href=\"#关于重复引用问题\" aria-hidden=\"true\">#</a> 关于重复引用问题</h3>\n<ol>\n<li>在 node 中无需关心这个问题，因为node在第一次引用时会将模块加载到缓存中，在再次引用的时候默认从缓存中加载，如果没有才会新加载该模块。</li>\n<li>面试官问题： 为什么Node.js 中，require( )加载模块是同步而非异步？\n<ul>\n<li>首先：node 遵循CommonJS 的标准</li>\n<li>这个是出于程序员的直觉，一个作为公共依赖的模块，当然是一步加载到位。</li>\n<li>模块的个数是有限的，Node中会自动缓存已经加载的模块，再加上访问的都是本地文件，产生的IO开销几乎可以忽略。</li>\n<li>node 程序运行在服务器端，应该不会频繁重启服务器的吧，那么在重启服务器的时候花多几秒时间也没什么影响的。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"模块化与作用域\"><a class=\"header-anchor\" href=\"#模块化与作用域\" aria-hidden=\"true\">#</a> 模块化与作用域</h2>\n<h3 id=\"this\"><a class=\"header-anchor\" href=\"#this\" aria-hidden=\"true\">#</a> this</h3>\n<ol>\n<li>既然有作用域的问题，那么this又是指向什么呢？\n<ul>\n<li>建立一个this.js 脚本<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// undefined</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>global<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//undefined</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div><!--beforeend--></div><!--afterend--></li>\n</ul>\n说明 let = a 并没有挂载到全局的 this 或者 global对象上\n<ul>\n<li>进行继续测试<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>a<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// undefined</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>global<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5 </span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div><!--beforeend--></div><!--afterend--></li>\n</ul>\n说明两者在脚本文件中并不等价！\n<ul>\n<li>其实 this 指向的是 module.exports。<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>module<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//10</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div><!--beforeend--></div><!--afterend--></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"node-中作用域的种类\"><a class=\"header-anchor\" href=\"#node-中作用域的种类\" aria-hidden=\"true\">#</a> Node 中作用域的种类</h3>\n<ol>\n<li>全局作用域(ES5)\n<ul>\n<li>如果一个变量没有使用 var或者let 进行定义，那么他就是全局作用域的内容，可以使用global对象进行访问，即使不在同一文件也能进行访问。</li>\n</ul>\n</li>\n<li>模块作用域\n<ul>\n<li>在模块作用域中使用 var、let、const 定义的变量在模块作用域中，模块与模块是不能直接访问的，模块作用域中的this指向 module.exports 中</li>\n</ul>\n</li>\n<li>函数作用域(ES5)</li>\n<li>块级作用域(ES6)</li>\n</ol>\n<h2 id=\"buffer\"><a class=\"header-anchor\" href=\"#buffer\" aria-hidden=\"true\">#</a> Buffer</h2>\n<ol>\n<li>作用是用来处理二进制数据的，通常表现十六进制的字符串。(现在已经不推荐使用Buffer了，而是使用Buffer.form)</li>\n</ol>\n<h3 id=\"buffer-from\"><a class=\"header-anchor\" href=\"#buffer-from\" aria-hidden=\"true\">#</a> Buffer.from</h3>\n<ol>\n<li>使用Buffer.from 来初始化一个Buffer<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> buffer<span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello node'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//&lt;Buffer 68 65 6c 6c 6f 20 6e 6f 64 65></span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div><!--beforeend--></div><!--afterend--></li>\n<li>使用toString 方法来将 Buffer 对象转换成字符串形式\n<ul>\n<li>buffer.toString([encoding],[start],[end])\n<ul>\n<li>encoding -- 目标编码格式</li>\n<li>start -- 开始位置</li>\n<li>end -- 结束位置</li>\n</ul>\n</li>\n<li>toString() 方法不给任何参数就是默认utf-8，并转换整个Buffer 对象</li>\n</ul>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> buffer<span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello node'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//hello node</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div><!--beforeend--></div><!--afterend--></li>\n</ol>\n<h2 id=\"file-system\"><a class=\"header-anchor\" href=\"#file-system\" aria-hidden=\"true\">#</a> file System</h2>\n<ol>\n<li>file System 是Node中使用最频繁的模块之一，这个模块提供了读写文件的能力，比较常用的api列举</li>\n</ol>\n<h3 id=\"readfile\"><a class=\"header-anchor\" href=\"#readfile\" aria-hidden=\"true\">#</a> readFile</h3>\n<p>1.readFile 用来异步读取文件中的内容\n<code>js let http = require('http'); let fs = require('fs'); let server = http.createServer(); server.on('request',function(req,res) { fs.readFile('./1.md',function(err,data) { if(err) throw err; res.end(data); }) })</code>\n其实我们可以使用toString 方法来进行转换为字符串，但是res.end 支持字符串</p>\n<h3 id=\"writefile\"><a class=\"header-anchor\" href=\"#writefile\" aria-hidden=\"true\">#</a> writeFile</h3>\n<ol>\n<li>writeFile 可以用来进行文件写入<!--beforebegin--><div class=\"language- line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>fs.writeFile(file,data[,options],callback());\n// 参数1：文件路径/文件名\n// 参数2：文件内容(options是字符串，则指定编码)\n// 参数3：回调函数\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div><!--beforeend--></div><!--afterend--></li>\n</ol>\n<h2 id=\"http服务\"><a class=\"header-anchor\" href=\"#http服务\" aria-hidden=\"true\">#</a> HTTP服务</h2>\n<ol>\n<li>HTTP 主要提供了一系列用于网络传输的API</li>\n</ol>\n<h3 id=\"创建http-服务器\"><a class=\"header-anchor\" href=\"#创建http-服务器\" aria-hidden=\"true\">#</a> 创建HTTP 服务器</h3>\n<ol>\n<li>通常使用 createServer 方法创建HTTP服务器，该方法返回一个http.server 类实例，<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'request'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span>res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token string\">'3000'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'服务器启动成功了~~'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br></div><!--beforeend--></div><!--afterend--></li>\n</ol>\n<h3 id=\"处理http请求\"><a class=\"header-anchor\" href=\"#处理http请求\" aria-hidden=\"true\">#</a> 处理HTTP请求</h3>\n<ol>\n<li>\n<p>档处理HTTP请求时，最先做的事是获取请求的URL、method等信息</p>\n</li>\n<li>\n<p>method 的值一般是 get、post、put、delete、update 5个关键字之一</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'request'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span>res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">let</span> method <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>method<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">let</span> url <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">;</span>\n   res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//GET</span>\n   res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// /或者 favicon.ico</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token string\">'3000'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"服务器启动成功了~~\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br></div><!--beforeend--></div><!--afterend--></li>\n<li>\n<p>http header 在Chrome控制台中可以查看，形式就不说了，复制上面的代码运行之后去NotWork中查看</p>\n</li>\n<li>\n<p>Node 使用 stream 来处理HTTP请求体，stream 注册了 data和 end 两个事件</p>\n</li>\n</ol>\n</div>\n",null]}