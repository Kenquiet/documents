{"remainingRequest":"/Users/kenquietwei/Desktop/documents/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/kenquietwei/Desktop/documents/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/kenquietwei/Desktop/documents/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/kenquietwei/Desktop/documents/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/kenquietwei/Desktop/documents/docs/QT/css3/6-3D变形.md?vue&type=template&id=00791cf9&","dependencies":[{"path":"/Users/kenquietwei/Desktop/documents/docs/QT/css3/6-3D变形.md","mtime":1557719053404},{"path":"/Users/kenquietwei/Desktop/documents/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/kenquietwei/Desktop/documents/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/kenquietwei/Desktop/documents/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/kenquietwei/Desktop/documents/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/kenquietwei/Desktop/documents/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":499162500000}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"_3d变形\\\"><a href=\\\"#_3d变形\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 3D变形</h1> <p>相比2D变换，主要多了景深和灭点</p> <h2 id=\\\"缩放\\\"><a href=\\\"#缩放\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 缩放</h2> <ol><li>和2D缩放使用相同也是使用 transform：scale（2）；放大两倍</li></ol> <h2 id=\\\"旋转\\\"><a href=\\\"#旋转\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 旋转</h2> <ol><li>rotateX 围绕X轴旋转</li> <li>rotateY 围绕Y轴旋转</li> <li>rotateZ 围绕Z轴旋转</li> <li>rotate3d(x,y,z,旋转度数){ 例如：rotate3d(1,0,0,360deg) }</li></ol> <h2 id=\\\"平移\\\"><a href=\\\"#平移\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 平移</h2> <ol><li>translateX 沿着X轴平移</li> <li>translateY 沿着Y轴平移</li> <li>translateZ 沿着Z轴平移</li> <li>translate3d(x,y,z) 先沿着X轴平移，再沿着Y轴平移 再沿着Z轴平移</li></ol> <h2 id=\\\"景深\\\"><a href=\\\"#景深\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 景深</h2> <h3 id=\\\"灭点\\\"><a href=\\\"#灭点\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 灭点</h3> <ol><li>了解景深之前，首先要了解灭点：指的是立体图形各个条变的延伸线产生的相交点。透视点的消失点</li></ol> <h3 id=\\\"景深-2\\\"><a href=\\\"#景深-2\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 景深</h3> <ol><li>景深:(perspective)\\n<ul><li>简单理解，景深就是我们肉眼距离显示器的距离，景深越大，元素离我们越远效果就不好，在CSS中，perspective用于激活一个3D空间，属性值就是景深的大小（默认值none）</li> <li>transform:perspective(100px)作用于本身、而且组合使用perspective(100px)必须放在最前面 例如：transform:perspective(100px) rotate(360deg)</li> <li>perspective：100px  作用于子元素（最常用法，作用于包裹器上，子元素有作用）</li></ul></li> <li>景深的原理\\n<ul><li>景深越大 灭点越远，元素变形越小</li> <li>景深越小，灭点越近，元素变形越大</li></ul></li> <li>景深基点：\\n<ul><li>就是我们视角的位置</li> <li>有两个控制属性：\\n<ul><li>perspective控制z轴</li> <li>perspective-origin控制X轴：50%，50%；(默认值，参照盒子模型)</li></ul></li></ul></li></ol> <h2 id=\\\"transform-style\\\"><a href=\\\"#transform-style\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> transform-style</h2> <ol><li>transform-style：preserve-3d\\n<ul><li>制造有层级的3d舞台，是一个不可继承的属性，作用于自己的直接子元素</li></ul></li> <li>景深叠加\\n<ul><li>一定要避免景深叠加的情况</li> <li>什么是景深叠加：包裹器有景深，包裹器的包裹器还有景深那么作用到子元素时就会产生叠加的情况，这个叠加是没有规则的</li></ul></li></ol> <h2 id=\\\"backface-visibility\\\"><a href=\\\"#backface-visibility\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> backface-visibility</h2> <ol><li>backface-visibility 属性是用来设置是否显示元素背面，默认是显示的（调透明度是可以看到的）\\n<ul><li>hidden 不显示背面</li> <li>visible （默认值）显示</li></ul></li></ol>\")])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}