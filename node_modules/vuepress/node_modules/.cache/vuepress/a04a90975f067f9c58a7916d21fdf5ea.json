{"remainingRequest":"/Users/kenquietwei/Desktop/documents/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/kenquietwei/Desktop/documents/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/kenquietwei/Desktop/documents/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/kenquietwei/Desktop/documents/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/kenquietwei/Desktop/documents/docs/QT/jQuery/2-对象.md?vue&type=template&id=4e2006f6&","dependencies":[{"path":"/Users/kenquietwei/Desktop/documents/docs/QT/jQuery/2-对象.md","mtime":1557367039182},{"path":"/Users/kenquietwei/Desktop/documents/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/kenquietwei/Desktop/documents/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/kenquietwei/Desktop/documents/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/kenquietwei/Desktop/documents/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/kenquietwei/Desktop/documents/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":499162500000}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"对象\\\"><a href=\\\"#对象\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 对象</h1> <h2 id=\\\"jq-对象与-dom-对象的区别\\\"><a href=\\\"#jq-对象与-dom-对象的区别\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> jq 对象与 DOM 对象的区别</h2> <p>首先 jq 对象是一个伪数组，不能调用数组的方法，有自己的方法。<br>\\njs 对象不能调用 jq 对象的方法，因为jq对象是一个伪数组集合，有自己的方法。<br>\\njq 对象也不能调用 js 对象的方法。</p> <h2 id=\\\"jq-对象与-dom-对象的相互转换\\\"><a href=\\\"#jq-对象与-dom-对象的相互转换\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> jq 对象与 DOM 对象的相互转换</h2> <p>如果 DOM 对象想使用jq 方法，那么就将DOM对象转换成jq对象</p> <div class=\\\"language-js line-numbers-mode\\\"><div class=\\\"highlight-lines\\\"><div class=\\\"highlighted\\\"> </div><br><div class=\\\"highlighted\\\"> </div><br></div><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> cloth <span class=\\\"token operator\\\">=</span> document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;cloth&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// 将js对象转换成 jq 对象</span>\\n<span class=\\\"token function\\\">$</span><span class=\\\"token punctuation\\\">(</span>cloth<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">text</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;呵呵&quot;</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre><div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br></div></div><h2 id=\\\"jq-对象想使用-dom-对象的方法\\\"><a href=\\\"#jq-对象想使用-dom-对象的方法\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> jq 对象想使用 DOM 对象的方法</h2> <p>将 jq 对象通过下标的方式取出来，这样就可以使用DOM的方法了</p> <div class=\\\"language-js line-numbers-mode\\\"><div class=\\\"highlight-lines\\\"><div class=\\\"highlighted\\\"> </div><br><div class=\\\"highlighted\\\"> </div><br></div><pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">let</span> $li <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">$</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">&quot;li&quot;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// 将jq对象中的第一个 DOM 对象取出来，就可以使用DOM对象的方法了</span>\\n$li<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span>style<span class=\\\"token punctuation\\\">.</span>backgroundColor <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">&quot;red&quot;</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre><div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br></div></div><div class=\\\"tip custom-block\\\"><p class=\\\"custom-block-title\\\">TIP</p> <p>补充说明： <code>let $li = $(&quot;li&quot;);</code> 左边的 li 前面加上 $ 只是为了好区分，让读我代码的人一眼就能看出来，这个是jq 对象</p></div> <h2 id=\\\"符号的实质\\\"><a href=\\\"#符号的实质\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> $符号的实质</h2> <p>$ 其实就是一个函数，以后使用$符号时记得跟小括号 $();<br>\\n参数是一个字符串，用来找对象 $(&quot;div&quot;) ,$(&quot;#btn&quot;),$(&quot;.current)<br>\\n$(domobj) 把dom对象转换成jQuery对象</p> <div class=\\\"language-js line-numbers-mode\\\"><div class=\\\"highlight-lines\\\"><br><div class=\\\"highlighted\\\"> </div><br><br><br></div><pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// 解析： 首先将document 转换成jq对象，然后使用jq对象的 ready()方法</span>\\n<span class=\\\"token function\\\">$</span><span class=\\\"token punctuation\\\">(</span>document<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ready</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  \\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre><div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br></div></div>\")])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}