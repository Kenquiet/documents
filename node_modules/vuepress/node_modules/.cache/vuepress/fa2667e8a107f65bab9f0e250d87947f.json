{"remainingRequest":"/Users/kenquietwei/Desktop/documents/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/kenquietwei/Desktop/documents/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/kenquietwei/Desktop/documents/docs/ES6/generator.md?vue&type=template&id=646b29d2&","dependencies":[{"path":"/Users/kenquietwei/Desktop/documents/docs/ES6/generator.md","mtime":1557211807749},{"path":"/Users/kenquietwei/Desktop/documents/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/kenquietwei/Desktop/documents/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/kenquietwei/Desktop/documents/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/kenquietwei/Desktop/documents/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/kenquietwei/Desktop/documents/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":499162500000}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"generator\"><a class=\"header-anchor\" href=\"#generator\" aria-hidden=\"true\">#</a> generator</h1>\n<h2 id=\"generator-中间可以停\"><a class=\"header-anchor\" href=\"#generator-中间可以停\" aria-hidden=\"true\">#</a> generator 中间可以停</h2>\n<ol>\n<li>generator 不能使用箭头函数来表达</li>\n<li>generator 有一个重要的标志，带有星号 *</li>\n</ol>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>//这就是一个 generator 函数\nfunction *show(){\n    \n}\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"yield-放弃执行的意思\"><a class=\"header-anchor\" href=\"#yield-放弃执行的意思\" aria-hidden=\"true\">#</a> yield 放弃执行的意思</h2>\n<h3 id=\"yield-可以传参\"><a class=\"header-anchor\" href=\"#yield-可以传参\" aria-hidden=\"true\">#</a> yield 可以传参</h3>\n<ol>\n<li>next 里面可以进行传参，传的参数就可以传到 yield 里面</li>\n<li>接收：let a = yield</li>\n<li>第一个 next 传参数，就是废的</li>\n<li>为什么 a 打印出5 来？因为第二个next 是执行<code>let a = yield</code> 一下的代码</li>\n<li>如果想在<code>let a = yield</code> 之前传参数，那么按着正常的设置形参，传实参就好了</li>\n</ol>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>function *show() {\n    alert(&#39;a&#39;);\n    \n    let a = yield\n    //yield; //使用 yield 进行暂停执行\n    \n    alert(&#39;b&#39;);\n    alert(a);// 打印出 5\n}\nlet gen = show();// 生成器对象\n\ngen.next(12);// 执行第一步 alert(&#39;a&#39;)\ngen.next(5);// 执行第二步 \n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"yield-也可以返回\"><a class=\"header-anchor\" href=\"#yield-也可以返回\" aria-hidden=\"true\">#</a> yield 也可以返回</h3>\n<ol>\n<li>yield 后面可以带东西，甭管是什么东西 ，你带什么就在 第一个next 就会返回什么结果</li>\n<li>如果后面的next 函数中没有return ，那么输出的结果就是 undefined ，有return 那么就 输出什么</li>\n<li></li>\n</ol>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>function *show() {\n      alert(&#39;a&#39;);\n\n      yield 12;\n\n      alert(&#39;b&#39;);\n      return 66;\n\n  }\n  let gen = show();// 调用函数\n\n  let res1 = gen.next();\n  console.log(res1); //{value: 12, done: false}\n\n  let res2 = gen.next();\n  // 如果没有return 那么 这里的value 值就是undefined\n  console.log(res2);//{value: 66, done: true}\n</code></pre>\n<!--beforeend--></div><!--afterend--></div>\n",null]}