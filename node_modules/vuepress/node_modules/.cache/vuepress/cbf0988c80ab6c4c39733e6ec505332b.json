{"remainingRequest":"/Users/kenquietwei/Desktop/documents/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/kenquietwei/Desktop/documents/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/kenquietwei/Desktop/documents/docs/QT/ES6/1-let 和 const 命令.md?vue&type=template&id=a8df8652&","dependencies":[{"path":"/Users/kenquietwei/Desktop/documents/docs/QT/ES6/1-let 和 const 命令.md","mtime":1557404258918},{"path":"/Users/kenquietwei/Desktop/documents/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/kenquietwei/Desktop/documents/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/kenquietwei/Desktop/documents/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/kenquietwei/Desktop/documents/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/kenquietwei/Desktop/documents/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":499162500000}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"let-和-const-命令\"><a class=\"header-anchor\" href=\"#let-和-const-命令\" aria-hidden=\"true\">#</a> let 和 const 命令</h1>\n<h2 id=\"let-命令\"><a class=\"header-anchor\" href=\"#let-命令\" aria-hidden=\"true\">#</a> let 命令</h2>\n<h3 id=\"基本用法\"><a class=\"header-anchor\" href=\"#基本用法\" aria-hidden=\"true\">#</a> 基本用法</h3>\n<p>ES6 新增了 let 命令，用于声明变量。用法和 var 类似，但是 let 声明只在代码块内有效，也就是let 有会计作用域，这就很好的解决了 for 循环计数器的问题</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><div class=\"highlight-lines\"><br><br><br><br><br><div class=\"highlighted\">&nbsp;</div><br><br></div><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 这里不再是 10， 而是输出6</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\na<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 6</span>\n</code></pre><div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br></div><!--beforeend--></div><!--afterend--><p>上面的代码中，使用了 let 之后 for循环就拥有了块级作用域，每一次输出i都会返回一个i，而且每一个 i 只在当次循环有效，所以每一次循环的 i 其实都是一个新的变量</p>\n<h3 id=\"不存在变量提升\"><a class=\"header-anchor\" href=\"#不存在变量提升\" aria-hidden=\"true\">#</a> 不存在变量提升</h3>\n<p>var 命令会发生&quot;变量提升&quot; 现象，即变量在声明之前使用，值为 undefined。为了更加的符合逻辑，<strong>let 命令改变了语法，必须在声明之后才可以使用，否则会报错</strong></p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// var 情况</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出值为 undefined</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// let 情况</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错</span>\n<span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br></div><!--beforeend--></div><!--afterend--><h3 id=\"暂时性死区\"><a class=\"header-anchor\" href=\"#暂时性死区\" aria-hidden=\"true\">#</a> 暂时性死区</h3>\n<p>只要在块级作用域内存在 let 或者 const 命令，那么这个区域的变量不再受外部影响，\n总之在代码块内，使用了let 命令声明变量之前，该变量都是不可以使用的，语法上这称为&quot;暂时性死区&quot;。</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    a <span class=\"token operator\">=</span> <span class=\"token string\">'abc'</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错</span>\n    <span class=\"token keyword\">let</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> \n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br></div><!--beforeend--></div><!--afterend--><h3 id=\"不允许重复声明\"><a class=\"header-anchor\" href=\"#不允许重复声明\" aria-hidden=\"true\">#</a> 不允许重复声明</h3>\n<p>let 不允许在同一个作用域内重复声明同一个变量。</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 重复声明报错</span>\n <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">c</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br></div><!--beforeend--></div><!--afterend--><h3 id=\"块级作用域\"><a class=\"header-anchor\" href=\"#块级作用域\" aria-hidden=\"true\">#</a> 块级作用域</h3>\n<p>ES5 只有全局作用域和函数作用域，没有块级作用域，这样有些地方很麻烦。\n例如-数据泄露：</p>\n<!--beforebegin--><div class=\"language-js{} line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>// 使用 var 情况\nvar  s = &#39;hello&#39;;\nfor (var i=0; i&lt;s.length; i++ ){\n    console.log(s[i]);\n}\nconsole.log(i);//5  这里我们并没有定义i，但是for循环中将 i=5 最终泄露出来了。\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br></div><!--beforeend--></div><!--afterend--><p>let 实际上为 JavaScript 新增了块级作用域</p>\n<!--beforebegin--><div class=\"language-js{} line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>// 使用 let 情况\n for (let i=0; i&lt;3; i++){\n     let a = i+1;\n     console.log(a);\n }\n console.log(i);// 没有定义 i 所以报错 \n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br></div><!--beforeend--></div><!--afterend--><h3 id=\"块级作用域与函数声明\"><a class=\"header-anchor\" href=\"#块级作用域与函数声明\" aria-hidden=\"true\">#</a> 块级作用域与函数声明</h3>\n<ol>\n<li>ES5 不允许在块级作用域中声明函数。</li>\n<li>ES6\n<ul>\n<li>允许块级作用域内声明函数；</li>\n<li>函数声明雷类似于 var，会提升到全局作用域或者函数作用域头部</li>\n<li>同时，函数声明还会提升到所在的会计作用域的头部</li>\n</ul>\n</li>\n</ol>\n<div class=\"tip custom-block\"><p class=\"custom-block-title\">TIP</p>\n<p>考虑到环境导致的行为差异过大，应该避免在块级作用域内声明函数，如有需要，则该写成函数表达式的形式，而不是函数声明语句。</p>\n</div>\n<!--beforebegin--><div class=\"language-js{} line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>// 函数声明语句\n{\n    let a = &#39;hello&#39;;\n    function f() {\n        return a;\n    }\n}\n// 函数表达式\n{\n    let b = &#39;secret&#39;;\n    let f2 = function（）{\n        return b;\n    }\n}\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br></div><!--beforeend--></div><!--afterend--><h2 id=\"const-命令\"><a class=\"header-anchor\" href=\"#const-命令\" aria-hidden=\"true\">#</a> const 命令</h2>\n<h3 id=\"基本用法-2\"><a class=\"header-anchor\" href=\"#基本用法-2\" aria-hidden=\"true\">#</a> 基本用法</h3>\n</div>\n",null]}